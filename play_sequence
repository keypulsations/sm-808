#!/bin/bash

read -p "Tempo in BPM (default 160): " tempo
tempo=${tempo:-160}
colorStart=$((320-tempo))

read -p "Amplitude (default 0.5): " amplitude
amplitude=${amplitude:-0.5}

# surpress keyboard input
stty -echo

# convert tempo to ms for sleep time b/w beats
ms=$(echo "scale=3; 60 / $tempo / 4" | bc)

# set audio paths
kicksPath=(audio/kicks/*)
snaresPath=(audio/snares/*)
hihatsPath=(audio/hihats/*)

kickAudioPath=${kicksPath[$RANDOM % ${#kicksPath[@]}]}
snareAudioPath=${snaresPath[$RANDOM % ${#snaresPath[@]}]}
hihatAudioPath=${hihatsPath[$RANDOM % ${#hihatsPath[@]}]}

# define beats and drumkit
declare -A beats
declare -A drumkit=(
  [kick]=$kickAudioPath
  [snare]=$snareAudioPath
  [hihat]=$hihatAudioPath
)

# these are predefined (credit: renasboy/command-line-sequencer)
# TODO: generate binary beat sequences from MIDI output generated by
# TensorFlow/Magenta neural nets trained on specific kick/snare/hh
# tracks from Splice
kick=(
  10000000001000001000000000100000
  10000000000000001000000000000000
  00000000001000000000000000100000
  10100000001000001010000000100000
  10100000000000001010000000000000
  10100000001100001010000000110000
  00110000001000000011000000100000
)

snare=(
  0000100000001000
  0000000000001000
  0000100000000000
  0000100101001001
  0000100101000010
  0100100101000010
  0100100101001010
)

hihat=(
  1111011111110111
  1111011010100111
  1111011010100011
  1111011010100010
  1111011010100000
  1010101010101010
  1010011111001010
)

randomRhythm() {
  beats=(
    [kick]=${kick[$RANDOM % ${#kick[@]}]}
    [snare]=${snare[$RANDOM % ${#snare[@]}]}
    [hihat]=${hihat[$RANDOM % ${#hihat[@]}]}
  )
}

start() {
  randomRhythm && playSequence
}

plot() {
  kit=$1

  if [ $kit == kick ]
  then
    char=$(echo -e '\u25F3')
  elif [ $kit == hihat ]
  then
    char=$(echo -e '\u25F2')
  elif [ $kit == snare ]
  then
    char=$(echo -e '\u25F1')
  fi

  plot="${beats[$kit]//1/$char}"
  plot="${plot//0/' '}"
  echo "${kit}: ${plot}"
}
###################

maxSteps() {
  numKickBeats="${#beats[kick]}"
  numSnareBeats="${#beats[snare]}"
  numHihatBeats="${#beats[hihat]}"

  stepLengths=($numKickBeats $numSnareBeats $numHihatBeats)
  IFS=$'\n'
  echo "${stepLengths[*]}" | sort -nr | head -n1
}

progress() {
  beat=$1
  echo -en "\e[48;5;$((beat+colorStart))m \e[0m"
}

normalizeSequences() {
  stps=$(maxSteps)
  steps="$(($stps - 1))"

  for kit in "${!beats[@]}"; do
    len="${#beats[$kit]}"
    stepMultiplier=$(expr $(maxSteps) / $len)
    str=""

    stepMult="$(($stepMultiplier - 1))"

    for multiple in `seq 0 $stepMult`; do
      str+="${beats[$kit]}"
    done

    beats[$kit]=$str
  done
}

plotSequences() {
  plot kick
  plot snare
  plot hihat
}

indentToFirstBeat() {
  # NOTE this should be associated with the kit string of max length
  # i.e. hihat or snare, so that the color progress bars are aligned
  # with the beats/steps displayed in the terminal
  progressIndent="      "
  printf "${progressIndent}"
}

progressThroughSteps() {
  for beat in `seq 0 $steps`; do
    for kit in "${!beats[@]}"; do
      [[ ${beats[$kit]:$beat:1} -eq 1 ]] &&
        play -q -v $amplitude ${drumkit[$kit]} -V1 &
    done

    progress $beat
    sleep $ms
  done
}

printAudioPaths() {
  printf "\n"
  printf "${kickAudioPath}\n"
  printf "${snareAudioPath}\n"
  printf "${hihatAudioPath}\n"
  printf "\n"
}

playSequence() {
  printAudioPaths
  normalizeSequences
  plotSequences
  indentToFirstBeat
  progressThroughSteps
  printf "\n\n"
}

start

stty echo
